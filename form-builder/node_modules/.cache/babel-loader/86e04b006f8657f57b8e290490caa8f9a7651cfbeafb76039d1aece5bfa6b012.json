{"ast":null,"code":"/**\r\n * browser/baseFile.js\r\n *\r\n * Copyright (c) 2012-2019 mooster@42at.com\r\n * https://github.com/moos/wordpos\r\n *\r\n * Released under MIT license\r\n */\n\nlet isTest = window.__mocha;\nclass BaseFile {\n  /**\r\n   * file contents - in browser it's just a string & not a file!\r\n   * @type {Object}\r\n   */\n  file = {};\n\n  /**\r\n   * constructor\r\n   * @param {type} type - 'index' or 'data'\r\n   * @param {string} dictPath - path to dict db\r\n   * @param {string} posName - one of 'noun', 'verb', 'adj', 'adv'\r\n   * @param {object} [options] - @see WordPOS options\r\n   */\n\n  constructor(type, dictPath, posName, options) {\n    this.type = type;\n    this.filePath = `${dictPath}/${type}.${posName}.js`;\n    this.posName = posName;\n    this.loadError = null;\n    this.options = Object.assign({}, options);\n  }\n  load() {\n    if (this.loadError) return Promise.reject(this.loadError);\n    if (this.loaded) return this.loaded;\n    this.options.debug && console.time('index load ' + this.posName);\n    let promise = isTest ? Promise.resolve(require(this.filePath)) : ES6_IMPORT(`${this.filePath}`); // prevent parcel from clobbering dynamic import\n\n    this.options.debug && console.timeEnd('index load ' + this.posName);\n    return this.loaded = promise.then(exports => {\n      this.file = exports.default;\n      return this;\n    }).catch(err => {\n      console.error(`Error loading \"${this.type}\" file ${this.filePath}.`, err);\n      this.loadError = err;\n      throw err;\n    });\n  }\n  ready(fn, args) {\n    return this.load().then(res => fn && fn.apply(this, args) || res);\n  }\n}\n\n// export default BaseFile;\nmodule.exports = BaseFile;","map":{"version":3,"names":["isTest","window","__mocha","BaseFile","file","constructor","type","dictPath","posName","options","filePath","loadError","Object","assign","load","Promise","reject","loaded","debug","console","time","promise","resolve","require","ES6_IMPORT","timeEnd","then","exports","default","catch","err","error","ready","fn","args","res","apply","module"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/node_modules/wordpos/src/browser/baseFile.js"],"sourcesContent":["/**\r\n * browser/baseFile.js\r\n *\r\n * Copyright (c) 2012-2019 mooster@42at.com\r\n * https://github.com/moos/wordpos\r\n *\r\n * Released under MIT license\r\n */\r\n\r\nlet isTest = window.__mocha;\r\n\r\nclass BaseFile {\r\n\r\n  /**\r\n   * file contents - in browser it's just a string & not a file!\r\n   * @type {Object}\r\n   */\r\n  file = {};\r\n\r\n  /**\r\n   * constructor\r\n   * @param {type} type - 'index' or 'data'\r\n   * @param {string} dictPath - path to dict db\r\n   * @param {string} posName - one of 'noun', 'verb', 'adj', 'adv'\r\n   * @param {object} [options] - @see WordPOS options\r\n   */\r\n\r\n  constructor(type, dictPath, posName, options) {\r\n    this.type = type;\r\n    this.filePath = `${dictPath}/${type}.${posName}.js`;\r\n    this.posName = posName;\r\n    this.loadError = null;\r\n    this.options = Object.assign({}, options);\r\n  }\r\n\r\n  load() {\r\n    if (this.loadError) return Promise.reject(this.loadError);\r\n    if (this.loaded) return this.loaded;\r\n\r\n    this.options.debug && console.time('index load ' + this.posName);\r\n\r\n    let promise = isTest\r\n      ? Promise.resolve(require(this.filePath))\r\n      : ES6_IMPORT(`${this.filePath}`); // prevent parcel from clobbering dynamic import\r\n\r\n    this.options.debug && console.timeEnd('index load ' + this.posName)\r\n    return this.loaded = promise\r\n      .then(exports => {\r\n        this.file = exports.default;\r\n        return this;\r\n      })\r\n      .catch(err => {\r\n        console.error(`Error loading \"${this.type}\" file ${this.filePath}.`, err);\r\n        this.loadError = err;\r\n        throw err;\r\n      });\r\n  }\r\n\r\n  ready(fn, args) {\r\n    return this.load().then(res => fn && fn.apply(this, args) || res);\r\n  }\r\n}\r\n\r\n// export default BaseFile;\r\nmodule.exports = BaseFile;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,MAAM,CAACC,OAAO;AAE3B,MAAMC,QAAQ,CAAC;EAEb;AACF;AACA;AACA;EACEC,IAAI,GAAG,CAAC,CAAC;;EAET;AACF;AACA;AACA;AACA;AACA;AACA;;EAEEC,WAAW,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAC5C,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACI,QAAQ,GAAI,GAAEH,QAAS,IAAGD,IAAK,IAAGE,OAAQ,KAAI;IACnD,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,SAAS,GAAG,IAAI;IACrB,IAAI,CAACF,OAAO,GAAGG,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAAC;EAC3C;EAEAK,IAAI,GAAG;IACL,IAAI,IAAI,CAACH,SAAS,EAAE,OAAOI,OAAO,CAACC,MAAM,CAAC,IAAI,CAACL,SAAS,CAAC;IACzD,IAAI,IAAI,CAACM,MAAM,EAAE,OAAO,IAAI,CAACA,MAAM;IAEnC,IAAI,CAACR,OAAO,CAACS,KAAK,IAAIC,OAAO,CAACC,IAAI,CAAC,aAAa,GAAG,IAAI,CAACZ,OAAO,CAAC;IAEhE,IAAIa,OAAO,GAAGrB,MAAM,GAChBe,OAAO,CAACO,OAAO,CAACC,OAAO,CAAC,IAAI,CAACb,QAAQ,CAAC,CAAC,GACvCc,UAAU,CAAE,GAAE,IAAI,CAACd,QAAS,EAAC,CAAC,CAAC,CAAC;;IAEpC,IAAI,CAACD,OAAO,CAACS,KAAK,IAAIC,OAAO,CAACM,OAAO,CAAC,aAAa,GAAG,IAAI,CAACjB,OAAO,CAAC;IACnE,OAAO,IAAI,CAACS,MAAM,GAAGI,OAAO,CACzBK,IAAI,CAACC,OAAO,IAAI;MACf,IAAI,CAACvB,IAAI,GAAGuB,OAAO,CAACC,OAAO;MAC3B,OAAO,IAAI;IACb,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;MACZX,OAAO,CAACY,KAAK,CAAE,kBAAiB,IAAI,CAACzB,IAAK,UAAS,IAAI,CAACI,QAAS,GAAE,EAAEoB,GAAG,CAAC;MACzE,IAAI,CAACnB,SAAS,GAAGmB,GAAG;MACpB,MAAMA,GAAG;IACX,CAAC,CAAC;EACN;EAEAE,KAAK,CAACC,EAAE,EAAEC,IAAI,EAAE;IACd,OAAO,IAAI,CAACpB,IAAI,EAAE,CAACY,IAAI,CAACS,GAAG,IAAIF,EAAE,IAAIA,EAAE,CAACG,KAAK,CAAC,IAAI,EAAEF,IAAI,CAAC,IAAIC,GAAG,CAAC;EACnE;AACF;;AAEA;AACAE,MAAM,CAACV,OAAO,GAAGxB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}