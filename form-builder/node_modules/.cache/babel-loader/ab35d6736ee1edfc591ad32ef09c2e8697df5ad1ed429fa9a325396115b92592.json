{"ast":null,"code":"/**\r\n* rand.js\r\n*\r\n* Copyright (c) 2012-2019 mooster@42at.com\r\n* https://github.com/moos/wordpos\r\n*\r\n* Released under MIT license\r\n*/\n\nvar {\n  uniq,\n  sample\n} = require('./util');\n\n/**\r\n * factory function for randX()\r\n *\r\n * @param pos {string} - a,r,n,v\r\n * @returns {Function} - rand function bound to an index file\r\n * @this WordPOS\r\n */\nfunction randX(pos) {\n  return function (opts, callback, _noprofile) {\n    // disable profiling when isX() used internally\n    var profile = this.options.profile && !_noprofile,\n      start = profile && new Date(),\n      args = [],\n      index = this.getFilesFor(pos).index,\n      startsWith = opts && opts.startsWith || '',\n      count = opts && opts.count || 1;\n    if (typeof opts === 'function') {\n      callback = opts;\n    }\n    return index.rand(startsWith, count, function (record) {\n      args.push(record, startsWith);\n      profile && args.push(new Date() - start);\n      callback && callback.apply(null, args);\n    });\n  };\n}\n\n/**\r\n * rand() - for all Index files\r\n *\r\n * @param [opts] {object} options\r\n * @param opts.startsWith {string} string random words should start with\r\n * @param opts.count {integer} number of random words to return\r\n * @param callback {function} - callback receives (results, startsWith, profile)\r\n * @returns {Promise} receives results\r\n * @this WordPOS\r\n */\nfunction rand(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = Object.assign({\n      startsWith: '',\n      count: 1\n    }, opts);\n  }\n  var profile = this.options.profile,\n    start = profile && new Date(),\n    results = [],\n    count = opts.count,\n    args = [null, opts.startsWith],\n    parts = 'Noun Verb Adjective Adverb'.split(' '),\n    self = this;\n  return new Promise(function (resolve, reject) {\n    // select at random a POS to look at\n    var doParts = sample(parts, parts.length);\n    tryPart();\n    function tryPart() {\n      var part = doParts.pop(),\n        rand = 'rand' + part,\n        factor = POS_factor[part],\n        weight = factor / POS_factor.Total;\n\n      // pick count according to relative weight\n      opts.count = Math.ceil(count * weight * 1.1); // guard against dupes\n      self[rand](opts, partCallback);\n    }\n    function partCallback(result) {\n      if (result) {\n        results = uniq(results.concat(result)); // make sure it's unique!\n      }\n\n      if (results.length < count && doParts.length) {\n        return tryPart();\n      }\n\n      // final random and trim excess\n      results = sample(results, count);\n      done();\n    }\n    function done() {\n      profile && args.push(new Date() - start);\n      args[0] = results;\n      callback && callback.apply(null, args);\n      resolve(results);\n    }\n  }); // Promise\n}\n\n// relative weight of each POS word count (DB 3.1 numbers)\nconst POS_factor = {\n  Noun: 26,\n  Verb: 3,\n  Adjective: 5,\n  Adverb: 1,\n  Total: 37\n};\nmodule.exports = {\n  randX,\n  rand\n};","map":{"version":3,"names":["uniq","sample","require","randX","pos","opts","callback","_noprofile","profile","options","start","Date","args","index","getFilesFor","startsWith","count","rand","record","push","apply","Object","assign","results","parts","split","self","Promise","resolve","reject","doParts","length","tryPart","part","pop","factor","POS_factor","weight","Total","Math","ceil","partCallback","result","concat","done","Noun","Verb","Adjective","Adverb","module","exports"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/node_modules/wordpos/src/rand.js"],"sourcesContent":["/**\r\n* rand.js\r\n*\r\n* Copyright (c) 2012-2019 mooster@42at.com\r\n* https://github.com/moos/wordpos\r\n*\r\n* Released under MIT license\r\n*/\r\n\r\nvar { uniq, sample } = require('./util');\r\n\r\n/**\r\n * factory function for randX()\r\n *\r\n * @param pos {string} - a,r,n,v\r\n * @returns {Function} - rand function bound to an index file\r\n * @this WordPOS\r\n */\r\nfunction randX(pos){\r\n  return function(opts, callback, _noprofile) {\r\n    // disable profiling when isX() used internally\r\n    var profile = this.options.profile && !_noprofile,\r\n      start = profile && new Date(),\r\n      args = [],\r\n      index = this.getFilesFor(pos).index,\r\n      startsWith = opts && opts.startsWith || '',\r\n      count = opts && opts.count || 1;\r\n\r\n    if (typeof opts === 'function') {\r\n      callback = opts;\r\n    }\r\n\r\n    return index.rand(startsWith, count, function (record) {\r\n      args.push(record, startsWith);\r\n      profile && args.push(new Date() - start);\r\n      callback && callback.apply(null, args);\r\n    });\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * rand() - for all Index files\r\n *\r\n * @param [opts] {object} options\r\n * @param opts.startsWith {string} string random words should start with\r\n * @param opts.count {integer} number of random words to return\r\n * @param callback {function} - callback receives (results, startsWith, profile)\r\n * @returns {Promise} receives results\r\n * @this WordPOS\r\n */\r\nfunction rand(opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else {\r\n    opts = Object.assign({\r\n      startsWith: '',\r\n      count: 1\r\n    }, opts);\r\n  }\r\n\r\n  var\r\n    profile = this.options.profile,\r\n    start = profile && new Date(),\r\n    results = [],\r\n    count = opts.count,\r\n    args = [null, opts.startsWith],\r\n    parts = 'Noun Verb Adjective Adverb'.split(' '),\r\n    self = this;\r\n\r\n  return new Promise(function(resolve, reject) {\r\n    // select at random a POS to look at\r\n    var doParts = sample(parts, parts.length);\r\n    tryPart();\r\n\r\n    function tryPart() {\r\n      var part = doParts.pop(),\r\n        rand = 'rand' + part,\r\n        factor = POS_factor[part],\r\n        weight = factor / POS_factor.Total;\r\n\r\n      // pick count according to relative weight\r\n      opts.count = Math.ceil(count * weight * 1.1); // guard against dupes\r\n      self[rand](opts, partCallback);\r\n    }\r\n\r\n    function partCallback(result) {\r\n      if (result) {\r\n        results = uniq(results.concat(result));  // make sure it's unique!\r\n      }\r\n\r\n      if (results.length < count && doParts.length) {\r\n        return tryPart();\r\n      }\r\n\r\n      // final random and trim excess\r\n      results = sample(results, count);\r\n      done();\r\n    }\r\n\r\n    function done() {\r\n      profile && (args.push(new Date() - start));\r\n      args[0] = results;\r\n      callback && callback.apply(null, args);\r\n      resolve(results);\r\n    }\r\n\r\n  }); // Promise\r\n}\r\n\r\n\r\n// relative weight of each POS word count (DB 3.1 numbers)\r\nconst POS_factor = {\r\n  Noun: 26,\r\n  Verb: 3,\r\n  Adjective: 5,\r\n  Adverb: 1,\r\n  Total: 37\r\n};\r\n\r\nmodule.exports = {\r\n  randX,\r\n  rand\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}