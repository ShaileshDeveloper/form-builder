{"ast":null,"code":"export let newAllQuestionKeyCombinationArray = [];\nfunction keyCreator(keyquestion) {\n  let singleQuestionKeyCombinationArray = [];\n  const wordsArray = keyquestion.split(\" \");\n  for (let i = 0; i < wordsArray.length; i++) {\n    const element1 = wordsArray[i];\n    const element2 = wordsArray[i + 1];\n    const element3 = wordsArray[i + 2];\n    const key = `${element1}_${element2}_${element3}`;\n    singleQuestionKeyCombinationArray.push(key.toLowerCase());\n    if (wordsArray.indexOf(element3) === wordsArray.length - 1) break;\n  }\n  singleQuestionKeyCombinationArray = singleQuestionKeyCombinationArray.filter(word => !word.includes(\"does\"));\n  singleQuestionKeyCombinationArray = singleQuestionKeyCombinationArray.filter(word => !word.includes(\"for\"));\n  console.log(singleQuestionKeyCombinationArray, \"xnjnsjnjnjnjn\");\n  var randomKeyOfSingleQuestion = singleQuestionKeyCombinationArray.length === 0 ? \"enter_your_key\" : singleQuestionKeyCombinationArray[Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)];\n  for (let i = 0; i < randomKeyOfSingleQuestion.length; i++) {\n    const singleCharacterOfKey = randomKeyOfSingleQuestion[i];\n    if (singleCharacterOfKey === \"?\" || singleCharacterOfKey === \":\" || singleCharacterOfKey === \",\" || singleCharacterOfKey === \"(\" || singleCharacterOfKey === \")\" || singleCharacterOfKey === \".\" || singleCharacterOfKey === \"/\" || singleCharacterOfKey === \"’\" || singleCharacterOfKey === \"-\") {\n      randomKeyOfSingleQuestion = randomKeyOfSingleQuestion.replace(singleCharacterOfKey, \"\");\n    }\n  }\n  if (!newAllQuestionKeyCombinationArray.includes(randomKeyOfSingleQuestion)) {\n    newAllQuestionKeyCombinationArray.push(randomKeyOfSingleQuestion);\n  } else {\n    var anotherRandomKey = singleQuestionKeyCombinationArray.length === 0 ? \"Enter_your_key\" : singleQuestionKeyCombinationArray[Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)];\n    for (let i = 0; i < anotherRandomKey.length; i++) {\n      const singleCharacterOfKey = anotherRandomKey[i];\n      if (singleCharacterOfKey === \"?\" || singleCharacterOfKey === \":\" || singleCharacterOfKey === \",\" || singleCharacterOfKey === \"(\" || singleCharacterOfKey === \")\" || singleCharacterOfKey === \"/\" || singleCharacterOfKey === \"’\" || singleCharacterOfKey === \"-\" || singleCharacterOfKey === \".\") {\n        anotherRandomKey = anotherRandomKey.replace(singleCharacterOfKey, \"\");\n      }\n    }\n    newAllQuestionKeyCombinationArray.push(anotherRandomKey);\n  }\n}\nexport default keyCreator;","map":{"version":3,"names":["newAllQuestionKeyCombinationArray","keyCreator","keyquestion","singleQuestionKeyCombinationArray","wordsArray","split","i","length","element1","element2","element3","key","push","toLowerCase","indexOf","filter","word","includes","console","log","randomKeyOfSingleQuestion","Math","floor","random","singleCharacterOfKey","replace","anotherRandomKey"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/src/keyCreator.js"],"sourcesContent":["export let newAllQuestionKeyCombinationArray = [];\r\n\r\nfunction keyCreator(keyquestion) {\r\n    let singleQuestionKeyCombinationArray = [];\r\n    const wordsArray = keyquestion.split(\" \");\r\n    for (let i = 0; i < wordsArray.length; i++) {\r\n      const element1 = wordsArray[i];\r\n      const element2 = wordsArray[i + 1];\r\n      const element3 = wordsArray[i + 2];\r\n      const key = `${element1}_${element2}_${element3}`;\r\n      singleQuestionKeyCombinationArray.push(key.toLowerCase());\r\n\r\n      if (wordsArray.indexOf(element3) === wordsArray.length - 1) break;\r\n    }\r\n    singleQuestionKeyCombinationArray = singleQuestionKeyCombinationArray.filter(word => !word.includes(\"does\"));\r\n    singleQuestionKeyCombinationArray = singleQuestionKeyCombinationArray.filter(word => !word.includes(\"for\"));\r\n\r\n\r\n    console.log(singleQuestionKeyCombinationArray,\"xnjnsjnjnjnjn\")\r\n    var randomKeyOfSingleQuestion = singleQuestionKeyCombinationArray.length === 0 ? \"enter_your_key\" : \r\n      singleQuestionKeyCombinationArray[\r\n        Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)\r\n      ];\r\n      \r\n     \r\n    for (let i = 0; i < randomKeyOfSingleQuestion.length; i++) {\r\n      const singleCharacterOfKey = randomKeyOfSingleQuestion[i];\r\n      if (\r\n        singleCharacterOfKey === \"?\" ||\r\n        singleCharacterOfKey === \":\" ||\r\n        singleCharacterOfKey === \",\" ||\r\n        singleCharacterOfKey === \"(\" ||\r\n        singleCharacterOfKey === \")\" ||\r\n        singleCharacterOfKey === \".\" ||\r\n        singleCharacterOfKey === \"/\" ||\r\n        singleCharacterOfKey === \"’\" ||\r\n        singleCharacterOfKey === \"-\"\r\n      ) {\r\n        randomKeyOfSingleQuestion = randomKeyOfSingleQuestion.replace(\r\n          singleCharacterOfKey,\r\n          \"\"\r\n        );\r\n      }\r\n    }\r\n  \r\n    if (!newAllQuestionKeyCombinationArray.includes(randomKeyOfSingleQuestion)) {\r\n      newAllQuestionKeyCombinationArray.push(randomKeyOfSingleQuestion);\r\n    } else {\r\n      var anotherRandomKey = singleQuestionKeyCombinationArray.length === 0 ? \"Enter_your_key\" :\r\n        singleQuestionKeyCombinationArray[\r\n          Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)\r\n        ];\r\n      for (let i = 0; i < anotherRandomKey.length; i++) {\r\n        const singleCharacterOfKey = anotherRandomKey[i];\r\n        if (\r\n          singleCharacterOfKey === \"?\" ||\r\n          singleCharacterOfKey === \":\" ||\r\n          singleCharacterOfKey === \",\" ||\r\n          singleCharacterOfKey === \"(\" ||\r\n          singleCharacterOfKey === \")\" ||\r\n          singleCharacterOfKey === \"/\" ||\r\n          singleCharacterOfKey === \"’\" ||\r\n          singleCharacterOfKey === \"-\" ||\r\n          singleCharacterOfKey === \".\"\r\n        ) {\r\n          anotherRandomKey = anotherRandomKey.replace(singleCharacterOfKey, \"\");\r\n        }\r\n      }\r\n      newAllQuestionKeyCombinationArray.push(anotherRandomKey);\r\n    }\r\n  }\r\n\r\n  export default keyCreator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}