{"ast":null,"code":"/**\r\n* browser/index.js\r\n*\r\n* Copyright (c) 2012-2019 mooster@42at.com\r\n* https://github.com/moos/wordpos\r\n*\r\n* Released under MIT license\r\n*/\n\nconst {\n  stopwords,\n  prepText,\n  makeStopwordString,\n  flat\n} = require('../util');\nconst {\n  is,\n  get,\n  getPOS,\n  lookup,\n  seek,\n  lookupPOS\n} = require('../common');\nconst {\n  randX,\n  rand\n} = require('../rand');\nconst IndexFile = require('./indexFile');\nconst DataFile = require('./dataFile');\nconst POS = {\n  n: 'noun',\n  v: 'verb',\n  a: 'adj',\n  r: 'adv'\n};\nclass WordPOS {\n  options = {};\n  constructor(config) {\n    this.options = Object.assign({}, WordPOS.defaults, config);\n    this.initFiles();\n    if (Array.isArray(this.options.stopwords)) {\n      this.options.stopwords = makeStopwordString(this.options.stopwords);\n    }\n  }\n  ready() {\n    return this.loaded || Promise.resolve();\n  }\n  initFiles() {\n    const keys = Object.keys(POS);\n    const loadOne = (Comp, pos) => new Comp(this.options.dictPath, POS[pos], this.options);\n    const loader = Comp => keys.map(loadOne.bind(null, Comp));\n    const reducer = arr => arr.reduce((coll, item, i) => (coll[keys[i]] = item, coll), {});\n    this.indexFiles = reducer(loader(IndexFile));\n    this.dataFiles = reducer(loader(DataFile));\n    if (this.options.preload) {\n      this.loaded = this.preloadFiles(this.options.preload);\n    }\n  }\n  getFilesFor(pos) {\n    return {\n      index: this.indexFiles[pos],\n      data: this.dataFiles[pos]\n    };\n  }\n\n  /**\r\n   * loads index files\r\n   *\r\n   * @param  {string|Array} [pos] POS to load (default: all)\r\n   * @return {Promise.<index data>}\r\n   */\n  preloadFiles(pos) {\n    let promise = this._preload(this.indexFiles, pos);\n    if (this.options.includeData) {\n      promise = Promise.all([].concat(promise, this._preload(this.dataFiles, pos))).then(res => flat(res));\n    }\n    return promise;\n  }\n  _preload(files, pos) {\n    let load = p => files[p].load();\n    let promise;\n    if (!pos || pos === true) {\n      // preload all\n      promise = Promise.all(Object.keys(POS).map(load));\n    } else if (typeof pos === 'string' && files[pos]) {\n      promise = load(pos);\n    } else if (pos instanceof Array) {\n      promise = Promise.all(pos.map(load));\n    }\n    return promise || Promise.reject(new RangeError(`Unknown POS \"${pos}\" for preload.`));\n  }\n  parse = prepText;\n  seek = seek;\n\n  /**\r\n   * isX() - Test if word is given POS\r\n   * @see is\r\n   */\n  isAdjective = is('a');\n  isAdverb = is('r');\n  isNoun = is('n');\n  isVerb = is('v');\n\n  /**\r\n   * getX() - Find all words in string that are given POS\r\n   * @see get\r\n   */\n  getPOS = getPOS;\n  getAdjectives = get('isAdjective');\n  getAdverbs = get('isAdverb');\n  getNouns = get('isNoun');\n  getVerbs = get('isVerb');\n\n  /**\r\n   * lookupX() - Lookup word definition if already know POS\r\n   * @see lookup\r\n   */\n  lookup = lookupPOS;\n  lookupAdjective = lookup('a');\n  lookupAdverb = lookup('r');\n  lookupNoun = lookup('n');\n  lookupVerb = lookup('v');\n\n  /**\r\n   * define randX()\r\n   * @see makeRandX\r\n   */\n  rand = rand;\n  randAdjective = randX('a');\n  randAdverb = randX('r');\n  randNoun = randX('n');\n  randVerb = randX('v');\n}\nWordPOS.defaults = {\n  /**\r\n   * path to WordNet data (override only if not using wordnet-db)\r\n   * @type {string}\r\n   */\n  dictPath: '',\n  /**\r\n   * enable profiling, time in msec returned as second argument in callback\r\n   * @type {boolean}\r\n   */\n  profile: false,\n  /**\r\n   * if true, exclude standard stopwords.\r\n   * if array, stopwords to exclude, eg, ['all','of','this',...]\r\n   * if false, do not filter any stopwords.\r\n   * @type {boolean}\r\n   */\n  stopwords: true,\n  /**\r\n   * preload files.\r\n   *    true - preload all POS\r\n   *    false - do not preload any POS\r\n   *    'a' - preload adj\r\n   *    ['a','v'] - preload adj & verb\r\n   * @type {boolean|string|Array}\r\n   */\n  preload: false,\n  /**\r\n   * include data files in preload\r\n   * @type {boolean}\r\n   */\n  includeData: false,\n  /**\r\n   * set to true to enable debug logging\r\n   * @type {boolean}\r\n   */\n  debug: false\n};\n\n/**\r\n * access to WordNet DB\r\n * @type {object}\r\n */\n// WordPOS.WNdb = WNdb;  // FIXME\n\n/**\r\n * access to stopwords\r\n * @type {Array}\r\n */\nWordPOS.stopwords = stopwords;\nWordPOS.POS = POS;\n\n// Export as CJS handled by Parcel, otherwise will get WordPOS.default\n// if use: export default WordPOS;\nmodule.exports = WordPOS;","map":{"version":3,"names":["stopwords","prepText","makeStopwordString","flat","require","is","get","getPOS","lookup","seek","lookupPOS","randX","rand","IndexFile","DataFile","POS","n","v","a","r","WordPOS","options","constructor","config","Object","assign","defaults","initFiles","Array","isArray","ready","loaded","Promise","resolve","keys","loadOne","Comp","pos","dictPath","loader","map","bind","reducer","arr","reduce","coll","item","i","indexFiles","dataFiles","preload","preloadFiles","getFilesFor","index","data","promise","_preload","includeData","all","concat","then","res","files","load","p","reject","RangeError","parse","isAdjective","isAdverb","isNoun","isVerb","getAdjectives","getAdverbs","getNouns","getVerbs","lookupAdjective","lookupAdverb","lookupNoun","lookupVerb","randAdjective","randAdverb","randNoun","randVerb","profile","debug","module","exports"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/node_modules/wordpos/src/browser/index.js"],"sourcesContent":["/**\r\n* browser/index.js\r\n*\r\n* Copyright (c) 2012-2019 mooster@42at.com\r\n* https://github.com/moos/wordpos\r\n*\r\n* Released under MIT license\r\n*/\r\n\r\nconst { stopwords, prepText, makeStopwordString, flat } = require('../util');\r\nconst { is, get, getPOS, lookup, seek, lookupPOS } = require('../common');\r\nconst { randX, rand } = require('../rand');\r\nconst IndexFile = require('./indexFile');\r\nconst DataFile = require('./dataFile');\r\n\r\nconst POS = {\r\n  n: 'noun',\r\n  v: 'verb',\r\n  a: 'adj',\r\n  r: 'adv'\r\n};\r\n\r\n\r\nclass WordPOS {\r\n\r\n  options = {};\r\n\r\n  constructor(config) {\r\n    this.options = Object.assign({}, WordPOS.defaults, config);\r\n\r\n    this.initFiles();\r\n    if (Array.isArray(this.options.stopwords)) {\r\n      this.options.stopwords = makeStopwordString(this.options.stopwords);\r\n    }\r\n  }\r\n\r\n  ready() {\r\n    return this.loaded || Promise.resolve();\r\n  }\r\n\r\n  initFiles() {\r\n    const keys = Object.keys(POS);\r\n    const loadOne = (Comp, pos) => new Comp(this.options.dictPath, POS[pos], this.options);\r\n    const loader = (Comp) => keys.map(loadOne.bind(null, Comp));\r\n    const reducer = (arr) => arr.reduce((coll, item, i) => (coll[keys[i]] = item, coll), {});\r\n\r\n    this.indexFiles = reducer(loader(IndexFile));\r\n    this.dataFiles = reducer(loader(DataFile));\r\n\r\n    if (this.options.preload) {\r\n      this.loaded = this.preloadFiles(this.options.preload);\r\n    }\r\n  }\r\n\r\n  getFilesFor(pos) {\r\n    return {\r\n      index: this.indexFiles[pos],\r\n      data: this.dataFiles[pos]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * loads index files\r\n   *\r\n   * @param  {string|Array} [pos] POS to load (default: all)\r\n   * @return {Promise.<index data>}\r\n   */\r\n  preloadFiles(pos) {\r\n    let promise = this._preload(this.indexFiles, pos);\r\n    if (this.options.includeData) {\r\n      promise = Promise.all([].concat(promise, this._preload(this.dataFiles, pos)))\r\n        .then(res => flat(res));\r\n    }\r\n    return promise;\r\n  }\r\n\r\n  _preload(files, pos) {\r\n    let load = p => files[p].load();\r\n    let promise;\r\n\r\n    if (!pos || pos === true) { // preload all\r\n      promise = Promise.all(Object.keys(POS).map(load));\r\n    }\r\n    else if (typeof pos === 'string' && files[pos]) {\r\n      promise = load(pos);\r\n    }\r\n    else if (pos instanceof Array) {\r\n      promise = Promise.all(pos.map(load));\r\n    }\r\n    return promise || Promise.reject(new RangeError(`Unknown POS \"${pos}\" for preload.`));\r\n  }\r\n\r\n  parse = prepText;\r\n\r\n  seek = seek;\r\n\r\n  /**\r\n   * isX() - Test if word is given POS\r\n   * @see is\r\n   */\r\n  isAdjective = is('a');\r\n  isAdverb = is('r');\r\n  isNoun = is('n');\r\n  isVerb = is('v');\r\n\r\n  /**\r\n   * getX() - Find all words in string that are given POS\r\n   * @see get\r\n   */\r\n  getPOS = getPOS;\r\n  getAdjectives = get('isAdjective');\r\n  getAdverbs = get('isAdverb');\r\n  getNouns = get('isNoun');\r\n  getVerbs = get('isVerb');\r\n\r\n  /**\r\n   * lookupX() - Lookup word definition if already know POS\r\n   * @see lookup\r\n   */\r\n  lookup = lookupPOS;\r\n  lookupAdjective = lookup('a');\r\n  lookupAdverb = lookup('r');\r\n  lookupNoun = lookup('n');\r\n  lookupVerb = lookup('v');\r\n\r\n  /**\r\n   * define randX()\r\n   * @see makeRandX\r\n   */\r\n  rand = rand;\r\n  randAdjective = randX('a');\r\n  randAdverb = randX('r');\r\n  randNoun = randX('n');\r\n  randVerb = randX('v');\r\n\r\n}\r\n\r\nWordPOS.defaults = {\r\n  /**\r\n   * path to WordNet data (override only if not using wordnet-db)\r\n   * @type {string}\r\n   */\r\n  dictPath: '',\r\n\r\n  /**\r\n   * enable profiling, time in msec returned as second argument in callback\r\n   * @type {boolean}\r\n   */\r\n  profile: false,\r\n\r\n  /**\r\n   * if true, exclude standard stopwords.\r\n   * if array, stopwords to exclude, eg, ['all','of','this',...]\r\n   * if false, do not filter any stopwords.\r\n   * @type {boolean}\r\n   */\r\n  stopwords: true,\r\n\r\n  /**\r\n   * preload files.\r\n   *    true - preload all POS\r\n   *    false - do not preload any POS\r\n   *    'a' - preload adj\r\n   *    ['a','v'] - preload adj & verb\r\n   * @type {boolean|string|Array}\r\n   */\r\n  preload: false,\r\n\r\n  /**\r\n   * include data files in preload\r\n   * @type {boolean}\r\n   */\r\n  includeData: false,\r\n\r\n  /**\r\n   * set to true to enable debug logging\r\n   * @type {boolean}\r\n   */\r\n  debug: false\r\n\r\n};\r\n\r\n/**\r\n * access to WordNet DB\r\n * @type {object}\r\n */\r\n// WordPOS.WNdb = WNdb;  // FIXME\r\n\r\n/**\r\n * access to stopwords\r\n * @type {Array}\r\n */\r\nWordPOS.stopwords = stopwords;\r\n\r\nWordPOS.POS = POS;\r\n\r\n// Export as CJS handled by Parcel, otherwise will get WordPOS.default\r\n// if use: export default WordPOS;\r\nmodule.exports = WordPOS;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA,SAAS;EAAEC,QAAQ;EAAEC,kBAAkB;EAAEC;AAAK,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC5E,MAAM;EAAEC,EAAE;EAAEC,GAAG;EAAEC,MAAM;EAAEC,MAAM;EAAEC,IAAI;EAAEC;AAAU,CAAC,GAAGN,OAAO,CAAC,WAAW,CAAC;AACzE,MAAM;EAAEO,KAAK;EAAEC;AAAK,CAAC,GAAGR,OAAO,CAAC,SAAS,CAAC;AAC1C,MAAMS,SAAS,GAAGT,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMU,QAAQ,GAAGV,OAAO,CAAC,YAAY,CAAC;AAEtC,MAAMW,GAAG,GAAG;EACVC,CAAC,EAAE,MAAM;EACTC,CAAC,EAAE,MAAM;EACTC,CAAC,EAAE,KAAK;EACRC,CAAC,EAAE;AACL,CAAC;AAGD,MAAMC,OAAO,CAAC;EAEZC,OAAO,GAAG,CAAC,CAAC;EAEZC,WAAW,CAACC,MAAM,EAAE;IAClB,IAAI,CAACF,OAAO,GAAGG,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,OAAO,CAACM,QAAQ,EAAEH,MAAM,CAAC;IAE1D,IAAI,CAACI,SAAS,EAAE;IAChB,IAAIC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACR,OAAO,CAACrB,SAAS,CAAC,EAAE;MACzC,IAAI,CAACqB,OAAO,CAACrB,SAAS,GAAGE,kBAAkB,CAAC,IAAI,CAACmB,OAAO,CAACrB,SAAS,CAAC;IACrE;EACF;EAEA8B,KAAK,GAAG;IACN,OAAO,IAAI,CAACC,MAAM,IAAIC,OAAO,CAACC,OAAO,EAAE;EACzC;EAEAN,SAAS,GAAG;IACV,MAAMO,IAAI,GAAGV,MAAM,CAACU,IAAI,CAACnB,GAAG,CAAC;IAC7B,MAAMoB,OAAO,GAAG,CAACC,IAAI,EAAEC,GAAG,KAAK,IAAID,IAAI,CAAC,IAAI,CAACf,OAAO,CAACiB,QAAQ,EAAEvB,GAAG,CAACsB,GAAG,CAAC,EAAE,IAAI,CAAChB,OAAO,CAAC;IACtF,MAAMkB,MAAM,GAAIH,IAAI,IAAKF,IAAI,CAACM,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC,IAAI,EAAEL,IAAI,CAAC,CAAC;IAC3D,MAAMM,OAAO,GAAIC,GAAG,IAAKA,GAAG,CAACC,MAAM,CAAC,CAACC,IAAI,EAAEC,IAAI,EAAEC,CAAC,MAAMF,IAAI,CAACX,IAAI,CAACa,CAAC,CAAC,CAAC,GAAGD,IAAI,EAAED,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAExF,IAAI,CAACG,UAAU,GAAGN,OAAO,CAACH,MAAM,CAAC1B,SAAS,CAAC,CAAC;IAC5C,IAAI,CAACoC,SAAS,GAAGP,OAAO,CAACH,MAAM,CAACzB,QAAQ,CAAC,CAAC;IAE1C,IAAI,IAAI,CAACO,OAAO,CAAC6B,OAAO,EAAE;MACxB,IAAI,CAACnB,MAAM,GAAG,IAAI,CAACoB,YAAY,CAAC,IAAI,CAAC9B,OAAO,CAAC6B,OAAO,CAAC;IACvD;EACF;EAEAE,WAAW,CAACf,GAAG,EAAE;IACf,OAAO;MACLgB,KAAK,EAAE,IAAI,CAACL,UAAU,CAACX,GAAG,CAAC;MAC3BiB,IAAI,EAAE,IAAI,CAACL,SAAS,CAACZ,GAAG;IAC1B,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEc,YAAY,CAACd,GAAG,EAAE;IAChB,IAAIkB,OAAO,GAAG,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACR,UAAU,EAAEX,GAAG,CAAC;IACjD,IAAI,IAAI,CAAChB,OAAO,CAACoC,WAAW,EAAE;MAC5BF,OAAO,GAAGvB,OAAO,CAAC0B,GAAG,CAAC,EAAE,CAACC,MAAM,CAACJ,OAAO,EAAE,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACP,SAAS,EAAEZ,GAAG,CAAC,CAAC,CAAC,CAC1EuB,IAAI,CAACC,GAAG,IAAI1D,IAAI,CAAC0D,GAAG,CAAC,CAAC;IAC3B;IACA,OAAON,OAAO;EAChB;EAEAC,QAAQ,CAACM,KAAK,EAAEzB,GAAG,EAAE;IACnB,IAAI0B,IAAI,GAAGC,CAAC,IAAIF,KAAK,CAACE,CAAC,CAAC,CAACD,IAAI,EAAE;IAC/B,IAAIR,OAAO;IAEX,IAAI,CAAClB,GAAG,IAAIA,GAAG,KAAK,IAAI,EAAE;MAAE;MAC1BkB,OAAO,GAAGvB,OAAO,CAAC0B,GAAG,CAAClC,MAAM,CAACU,IAAI,CAACnB,GAAG,CAAC,CAACyB,GAAG,CAACuB,IAAI,CAAC,CAAC;IACnD,CAAC,MACI,IAAI,OAAO1B,GAAG,KAAK,QAAQ,IAAIyB,KAAK,CAACzB,GAAG,CAAC,EAAE;MAC9CkB,OAAO,GAAGQ,IAAI,CAAC1B,GAAG,CAAC;IACrB,CAAC,MACI,IAAIA,GAAG,YAAYT,KAAK,EAAE;MAC7B2B,OAAO,GAAGvB,OAAO,CAAC0B,GAAG,CAACrB,GAAG,CAACG,GAAG,CAACuB,IAAI,CAAC,CAAC;IACtC;IACA,OAAOR,OAAO,IAAIvB,OAAO,CAACiC,MAAM,CAAC,IAAIC,UAAU,CAAE,gBAAe7B,GAAI,gBAAe,CAAC,CAAC;EACvF;EAEA8B,KAAK,GAAGlE,QAAQ;EAEhBQ,IAAI,GAAGA,IAAI;;EAEX;AACF;AACA;AACA;EACE2D,WAAW,GAAG/D,EAAE,CAAC,GAAG,CAAC;EACrBgE,QAAQ,GAAGhE,EAAE,CAAC,GAAG,CAAC;EAClBiE,MAAM,GAAGjE,EAAE,CAAC,GAAG,CAAC;EAChBkE,MAAM,GAAGlE,EAAE,CAAC,GAAG,CAAC;;EAEhB;AACF;AACA;AACA;EACEE,MAAM,GAAGA,MAAM;EACfiE,aAAa,GAAGlE,GAAG,CAAC,aAAa,CAAC;EAClCmE,UAAU,GAAGnE,GAAG,CAAC,UAAU,CAAC;EAC5BoE,QAAQ,GAAGpE,GAAG,CAAC,QAAQ,CAAC;EACxBqE,QAAQ,GAAGrE,GAAG,CAAC,QAAQ,CAAC;;EAExB;AACF;AACA;AACA;EACEE,MAAM,GAAGE,SAAS;EAClBkE,eAAe,GAAGpE,MAAM,CAAC,GAAG,CAAC;EAC7BqE,YAAY,GAAGrE,MAAM,CAAC,GAAG,CAAC;EAC1BsE,UAAU,GAAGtE,MAAM,CAAC,GAAG,CAAC;EACxBuE,UAAU,GAAGvE,MAAM,CAAC,GAAG,CAAC;;EAExB;AACF;AACA;AACA;EACEI,IAAI,GAAGA,IAAI;EACXoE,aAAa,GAAGrE,KAAK,CAAC,GAAG,CAAC;EAC1BsE,UAAU,GAAGtE,KAAK,CAAC,GAAG,CAAC;EACvBuE,QAAQ,GAAGvE,KAAK,CAAC,GAAG,CAAC;EACrBwE,QAAQ,GAAGxE,KAAK,CAAC,GAAG,CAAC;AAEvB;AAEAS,OAAO,CAACM,QAAQ,GAAG;EACjB;AACF;AACA;AACA;EACEY,QAAQ,EAAE,EAAE;EAEZ;AACF;AACA;AACA;EACE8C,OAAO,EAAE,KAAK;EAEd;AACF;AACA;AACA;AACA;AACA;EACEpF,SAAS,EAAE,IAAI;EAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEkD,OAAO,EAAE,KAAK;EAEd;AACF;AACA;AACA;EACEO,WAAW,EAAE,KAAK;EAElB;AACF;AACA;AACA;EACE4B,KAAK,EAAE;AAET,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAjE,OAAO,CAACpB,SAAS,GAAGA,SAAS;AAE7BoB,OAAO,CAACL,GAAG,GAAGA,GAAG;;AAEjB;AACA;AACAuE,MAAM,CAACC,OAAO,GAAGnE,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}