{"ast":null,"code":"/*\nCopyright (c) 2014 Ken Koch\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/** \n * The basis of the TRIE structure.\n **/\nfunction Trie(caseSensitive) {\n  this.dictionary = {};\n  this.$ = false;\n  if (typeof caseSensitive === \"undefined\") {\n    caseSensitive = true;\n  }\n  this.cs = caseSensitive;\n}\n\n/**\n * Add a single string to the TRIE, returns true if the word was already in the \n * trie.\n **/\nTrie.prototype.addString = function (string) {\n  if (this.cs === false) {\n    string = string.toLowerCase();\n  }\n\n  // If the string has only one letter, mark this as a word.\n  if (string.length === 0) {\n    var wasWord = this.$;\n    this.$ = true;\n    return wasWord;\n  }\n\n  // Make sure theres a Trie node in our dictionary\n  var next = this.dictionary[string[0]];\n  if (!next) {\n    this.dictionary[string[0]] = new Trie(this.cs);\n    next = this.dictionary[string[0]];\n  }\n\n  // Continue adding the string\n  return next.addString(string.substring(1));\n};\n\n/**\n * Add multiple strings to the TRIE\n **/\nTrie.prototype.addStrings = function (list) {\n  for (var i in list) {\n    this.addString(list[i]);\n  }\n};\n\n/**\n * A function to search the TRIE and return an array of\n * words which have same prefix <prefix>\n * for example if we had the following words in our database:\n * a, ab, bc, cd, abc, abd\n * and we search the string: a\n * we will get :\n * [a, ab, abc, abd]\n **/\nTrie.prototype.keysWithPrefix = function (prefix) {\n  if (this.caseSensitive === false) {\n    prefix = prefix.toLowerCase();\n  }\n  function isEmpty(object) {\n    for (var key in object) if (object.hasOwnProperty(key)) return false;\n    return true;\n  }\n  function get(node, word) {\n    if (!node) return null;\n    if (word.length == 0) return node;\n    return get(node.dictionary[word[0]], word.substring(1));\n  }\n  function recurse(node, stringAgg, resultsAgg) {\n    if (!node) return;\n\n    // Check if this is a word\n    if (node.$) {\n      resultsAgg.push(stringAgg);\n    }\n    if (isEmpty(node.dictionary)) {\n      return;\n    }\n    for (var c in node.dictionary) {\n      recurse(node.dictionary[c], stringAgg + c, resultsAgg);\n    }\n  }\n  var results = [];\n  recurse(get(this, prefix), prefix, results);\n  return results;\n};\n\n/** \n * A function to search the given string and return true if it lands\n * on on a word. Essentially testing if the word exists in the database.\n **/\nTrie.prototype.contains = function (string) {\n  if (this.cs === false) {\n    string = string.toLowerCase();\n  }\n  if (string.length === 0) {\n    return this.$;\n  }\n\n  // Otherwise, we need to continue searching\n  var firstLetter = string[0];\n  var next = this.dictionary[firstLetter];\n\n  // If we don't have a node, this isn't a word\n  if (!next) {\n    return false;\n  }\n\n  // Otherwise continue the search at the next node\n  return next.contains(string.substring(1));\n};\n\n/**\n * A function to search the TRIE and return an array of words which were encountered along the way.\n * This will only return words with full prefix matches.\n * for example if we had the following words in our database:\n * a, ab, bc, cd, abc\n * and we searched the string: abcd\n * we would get only:\n * [a, ab, abc]\n **/\nTrie.prototype.findMatchesOnPath = function (search) {\n  if (this.cs === false) {\n    search = search.toLowerCase();\n  }\n  function recurse(node, search, stringAgg, resultsAgg) {\n    // Check if this is a word.\n    if (node.$) {\n      resultsAgg.push(stringAgg);\n    }\n\n    // Check if the have completed the seearch\n    if (search.length === 0) {\n      return resultsAgg;\n    }\n\n    // Otherwise, continue searching\n    var next = node.dictionary[search[0]];\n    if (!next) {\n      return resultsAgg;\n    }\n    return recurse(next, search.substring(1), stringAgg + search[0], resultsAgg);\n  }\n  ;\n  return recurse(this, search, \"\", []);\n};\n\n/**\n * Returns the longest match and the remaining part that could not be matched.\n * inspired by [NLTK containers.trie.find_prefix](http://nltk.googlecode.com/svn-/trunk/doc/api/nltk.containers.Trie-class.html).\n **/\nTrie.prototype.findPrefix = function (search) {\n  if (this.cs === false) {\n    search = search.toLowerCase();\n  }\n  function recurse(node, search, stringAgg, lastWord) {\n    // Check if this is a word\n    if (node.$) {\n      lastWord = stringAgg;\n    }\n\n    // Check if we have no more to search\n    if (search.length === 0) {\n      return [lastWord, search];\n    }\n\n    // Continue searching\n    var next = node.dictionary[search[0]];\n    if (!next) {\n      return [lastWord, search];\n    }\n    return recurse(next, search.substring(1), stringAgg + search[0], lastWord);\n  }\n  ;\n  return recurse(this, search, \"\", null);\n};\n\n/**\n * Computes the number of actual nodes from this node to the end.\n * Note: This involves traversing the entire structure and may not be\n * good for frequent use.\n **/\nTrie.prototype.getSize = function () {\n  var total = 1;\n  for (var c in this.dictionary) {\n    total += this.dictionary[c].getSize();\n  }\n  return total;\n};\n\n/**\n * EXPORT THE TRIE\n **/\nmodule.exports = Trie;","map":{"version":3,"names":["Trie","caseSensitive","dictionary","$","cs","prototype","addString","string","toLowerCase","length","wasWord","next","substring","addStrings","list","i","keysWithPrefix","prefix","isEmpty","object","key","hasOwnProperty","get","node","word","recurse","stringAgg","resultsAgg","push","c","results","contains","firstLetter","findMatchesOnPath","search","findPrefix","lastWord","getSize","total","module","exports"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/node_modules/wordpos/lib/natural/trie/trie.js"],"sourcesContent":["/*\nCopyright (c) 2014 Ken Koch\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/** \n * The basis of the TRIE structure.\n **/\nfunction Trie(caseSensitive) {\n\tthis.dictionary = {};\n\tthis.$ = false;\n\n\tif(typeof caseSensitive === \"undefined\") {\n\t\tcaseSensitive = true;\n\t}\n\n\tthis.cs = caseSensitive;\n}\n\n/**\n * Add a single string to the TRIE, returns true if the word was already in the \n * trie.\n **/\nTrie.prototype.addString = function(string) {\n\tif(this.cs === false) {\n\t\tstring = string.toLowerCase();\n\t}\n\n\t// If the string has only one letter, mark this as a word.\n\tif(string.length === 0) {\n\t\tvar wasWord = this.$;\n\t\tthis.$ = true;\n\t\treturn wasWord;\n\t}\n\n\t// Make sure theres a Trie node in our dictionary\n\tvar next = this.dictionary[string[0]];\n\n\tif(!next) {\n\t\tthis.dictionary[string[0]] = new Trie(this.cs);\n\t\tnext = this.dictionary[string[0]];\n\t}\n\n\t// Continue adding the string\n\treturn next.addString(string.substring(1));\n};\n\n/**\n * Add multiple strings to the TRIE\n **/\nTrie.prototype.addStrings = function(list) {\n\tfor(var i in list) {\n\t\tthis.addString(list[i]);\n\t}\n};\n\n/**\n * A function to search the TRIE and return an array of\n * words which have same prefix <prefix>\n * for example if we had the following words in our database:\n * a, ab, bc, cd, abc, abd\n * and we search the string: a\n * we will get :\n * [a, ab, abc, abd]\n **/\nTrie.prototype.keysWithPrefix = function(prefix) {\n    if(this.caseSensitive === false) {\n        prefix = prefix.toLowerCase();\n    }\n\n    function isEmpty (object) {\n        for (var key in object) if (object.hasOwnProperty(key)) return false;\n        return true;\n    }\n\n    function get (node, word) {\n        if(!node) return null;\n        if(word.length == 0) return node;\n        return get(node.dictionary[word[0]], word.substring(1));\n    }\n\n    function recurse ( node, stringAgg, resultsAgg) {\n        if (!node) return;\n\n        // Check if this is a word\n        if (node.$) {\n            resultsAgg.push(stringAgg);\n        }\n\n        if (isEmpty(node.dictionary)) {\n            return ;\n        }\n\n        for (var c in node.dictionary) {\n            recurse (node.dictionary[c],stringAgg + c, resultsAgg);\n        }\n    }\n\n    var results = [];\n    recurse (get(this, prefix), prefix, results);\n    return results;\n};\n\n/** \n * A function to search the given string and return true if it lands\n * on on a word. Essentially testing if the word exists in the database.\n **/\nTrie.prototype.contains = function(string) {\n\tif(this.cs === false) {\n\t\tstring = string.toLowerCase();\n\t}\n\n\tif(string.length === 0) {\n\t\treturn this.$;\n\t}\n\n\t// Otherwise, we need to continue searching\n\tvar firstLetter = string[0];\n\tvar next = this.dictionary[firstLetter];\t\t\n\n\t// If we don't have a node, this isn't a word\n\tif(!next) {\n\t\treturn false;\n\t}\n\n\t// Otherwise continue the search at the next node\n\treturn next.contains(string.substring(1));\n}\n\n/**\n * A function to search the TRIE and return an array of words which were encountered along the way.\n * This will only return words with full prefix matches.\n * for example if we had the following words in our database:\n * a, ab, bc, cd, abc\n * and we searched the string: abcd\n * we would get only:\n * [a, ab, abc]\n **/\nTrie.prototype.findMatchesOnPath = function(search) {\n\tif(this.cs === false) {\n\t\tsearch = search.toLowerCase();\n\t}\n\n\tfunction recurse(node, search, stringAgg, resultsAgg) {\n\t\t// Check if this is a word.\n\t\tif(node.$) {\n\t\t\tresultsAgg.push(stringAgg);\n\t\t}\n\n\t\t// Check if the have completed the seearch\n\t\tif(search.length === 0) {\n\t\t\treturn resultsAgg;\n\t\t}\n\n\t\t// Otherwise, continue searching\n\t\tvar next = node.dictionary[search[0]];\n\t\tif(!next) {\n\t\t\treturn resultsAgg;\n\t\t}\n\t\treturn recurse(next, search.substring(1), stringAgg + search[0], resultsAgg);\n\t};\n\n\treturn recurse(this, search, \"\", []);\n};\n\n/**\n * Returns the longest match and the remaining part that could not be matched.\n * inspired by [NLTK containers.trie.find_prefix](http://nltk.googlecode.com/svn-/trunk/doc/api/nltk.containers.Trie-class.html).\n **/\nTrie.prototype.findPrefix = function(search) {\n\tif(this.cs === false) {\n\t\tsearch = search.toLowerCase();\n\t}\n\t\n\tfunction recurse(node, search, stringAgg, lastWord) {\n\t\t// Check if this is a word\n\t\tif(node.$) {\n\t\t\tlastWord = stringAgg;\n\t\t}\n\n\t\t// Check if we have no more to search\n\t\tif(search.length === 0) {\n\t\t\treturn [lastWord, search];\n\t\t}\n\n\t\t// Continue searching\n\t\tvar next = node.dictionary[search[0]];\n\t\tif(!next) {\n\t\t\treturn [lastWord, search];\n\t\t}\n\t\treturn recurse(next, search.substring(1), stringAgg + search[0], lastWord);\n\t};\n\n\treturn recurse(this, search, \"\", null);\n};\n\n/**\n * Computes the number of actual nodes from this node to the end.\n * Note: This involves traversing the entire structure and may not be\n * good for frequent use.\n **/\nTrie.prototype.getSize = function() { \n\tvar total = 1;\n\tfor(var c in this.dictionary) {\n\t\ttotal += this.dictionary[c].getSize();\n\t}\n\treturn total;\n};\n\n/**\n * EXPORT THE TRIE\n **/\nmodule.exports = Trie;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}