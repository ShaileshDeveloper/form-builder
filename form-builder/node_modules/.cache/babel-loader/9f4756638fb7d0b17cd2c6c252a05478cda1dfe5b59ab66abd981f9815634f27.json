{"ast":null,"code":"export let newAllQuestionKeyCombinationArray = [];\nfunction keyCreator(keyquestion) {\n  const singleQuestionKeyCombinationArray = [];\n  const wordsArray = keyquestion.split(\" \");\n  for (let i = 0; i < wordsArray.length; i++) {\n    const element1 = wordsArray[i];\n    const element2 = wordsArray[i + 1];\n    const element3 = wordsArray[i + 2];\n    const key = `${element1}_${element2}_${element3}`;\n    if (element1 === \"does\") {\n      console.log(\"xnanxnaknx\");\n    }\n    // if(element1 || element2 || element3 === \"does\"){\n    //   console.log(\"does hai\")\n    //   console.log(key,\"ekt\")\n    // }else{\n    //   console.log(\"ye walmlanbxka kx kanbcbibck\")\n    // singleQuestionKeyCombinationArray.push(key.toLowerCase());\n    // }\n    singleQuestionKeyCombinationArray.push(key.toLowerCase());\n    if (wordsArray.indexOf(element3) === wordsArray.length - 1) break;\n  }\n  var randomKeyOfSingleQuestion = singleQuestionKeyCombinationArray[Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)];\n  const newArrayOfKey = randomKeyOfSingleQuestion.split(\"_\");\n  for (let i = 0; i < randomKeyOfSingleQuestion.length; i++) {\n    const singleCharacterOfKey = randomKeyOfSingleQuestion[i];\n    if (singleCharacterOfKey === \"?\" || singleCharacterOfKey === \":\" || singleCharacterOfKey === \",\" || singleCharacterOfKey === \"(\" || singleCharacterOfKey === \")\" || singleCharacterOfKey === \".\" || singleCharacterOfKey === \"/\" || singleCharacterOfKey === \"’\" || singleCharacterOfKey === \"-\") {\n      randomKeyOfSingleQuestion = randomKeyOfSingleQuestion.replace(singleCharacterOfKey, \"\");\n    }\n  }\n  if (!newAllQuestionKeyCombinationArray.includes(randomKeyOfSingleQuestion)) {\n    newAllQuestionKeyCombinationArray.push(randomKeyOfSingleQuestion);\n  } else {\n    var anotherRandomKey = singleQuestionKeyCombinationArray[Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)];\n    for (let i = 0; i < anotherRandomKey.length; i++) {\n      const singleCharacterOfKey = anotherRandomKey[i];\n      if (singleCharacterOfKey === \"?\" || singleCharacterOfKey === \":\" || singleCharacterOfKey === \",\" || singleCharacterOfKey === \"(\" || singleCharacterOfKey === \")\" || singleCharacterOfKey === \"/\" || singleCharacterOfKey === \"’\" || singleCharacterOfKey === \"-\" || singleCharacterOfKey === \".\") {\n        anotherRandomKey = anotherRandomKey.replace(singleCharacterOfKey, \"\");\n      }\n    }\n    newAllQuestionKeyCombinationArray.push(anotherRandomKey);\n  }\n}\nexport default keyCreator;","map":{"version":3,"names":["newAllQuestionKeyCombinationArray","keyCreator","keyquestion","singleQuestionKeyCombinationArray","wordsArray","split","i","length","element1","element2","element3","key","console","log","push","toLowerCase","indexOf","randomKeyOfSingleQuestion","Math","floor","random","newArrayOfKey","singleCharacterOfKey","replace","includes","anotherRandomKey"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/src/keyCreator.js"],"sourcesContent":["export let newAllQuestionKeyCombinationArray = [];\r\n\r\nfunction keyCreator(keyquestion) {\r\n    const singleQuestionKeyCombinationArray = [];\r\n    const wordsArray = keyquestion.split(\" \");\r\n    for (let i = 0; i < wordsArray.length; i++) {\r\n      const element1 = wordsArray[i];\r\n      const element2 = wordsArray[i + 1];\r\n      const element3 = wordsArray[i + 2];\r\n      const key = `${element1}_${element2}_${element3}`;\r\n      if(element1 === \"does\"){\r\n        console.log(\"xnanxnaknx\")\r\n      }\r\n      // if(element1 || element2 || element3 === \"does\"){\r\n      //   console.log(\"does hai\")\r\n      //   console.log(key,\"ekt\")\r\n      // }else{\r\n      //   console.log(\"ye walmlanbxka kx kanbcbibck\")\r\n      // singleQuestionKeyCombinationArray.push(key.toLowerCase());\r\n      // }\r\n      singleQuestionKeyCombinationArray.push(key.toLowerCase());\r\n\r\n      if (wordsArray.indexOf(element3) === wordsArray.length - 1) break;\r\n    }\r\n  \r\n    var randomKeyOfSingleQuestion =\r\n      singleQuestionKeyCombinationArray[\r\n        Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)\r\n      ];\r\n      const newArrayOfKey = randomKeyOfSingleQuestion.split(\"_\")\r\n     \r\n    for (let i = 0; i < randomKeyOfSingleQuestion.length; i++) {\r\n      const singleCharacterOfKey = randomKeyOfSingleQuestion[i];\r\n      if (\r\n        singleCharacterOfKey === \"?\" ||\r\n        singleCharacterOfKey === \":\" ||\r\n        singleCharacterOfKey === \",\" ||\r\n        singleCharacterOfKey === \"(\" ||\r\n        singleCharacterOfKey === \")\" ||\r\n        singleCharacterOfKey === \".\" ||\r\n        singleCharacterOfKey === \"/\" ||\r\n        singleCharacterOfKey === \"’\" ||\r\n        singleCharacterOfKey === \"-\"\r\n      ) {\r\n        randomKeyOfSingleQuestion = randomKeyOfSingleQuestion.replace(\r\n          singleCharacterOfKey,\r\n          \"\"\r\n        );\r\n      }\r\n    }\r\n  \r\n    if (!newAllQuestionKeyCombinationArray.includes(randomKeyOfSingleQuestion)) {\r\n      newAllQuestionKeyCombinationArray.push(randomKeyOfSingleQuestion);\r\n    } else {\r\n      var anotherRandomKey =\r\n        singleQuestionKeyCombinationArray[\r\n          Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)\r\n        ];\r\n      for (let i = 0; i < anotherRandomKey.length; i++) {\r\n        const singleCharacterOfKey = anotherRandomKey[i];\r\n        if (\r\n          singleCharacterOfKey === \"?\" ||\r\n          singleCharacterOfKey === \":\" ||\r\n          singleCharacterOfKey === \",\" ||\r\n          singleCharacterOfKey === \"(\" ||\r\n          singleCharacterOfKey === \")\" ||\r\n          singleCharacterOfKey === \"/\" ||\r\n          singleCharacterOfKey === \"’\" ||\r\n          singleCharacterOfKey === \"-\" ||\r\n          singleCharacterOfKey === \".\"\r\n        ) {\r\n          anotherRandomKey = anotherRandomKey.replace(singleCharacterOfKey, \"\");\r\n        }\r\n      }\r\n      newAllQuestionKeyCombinationArray.push(anotherRandomKey);\r\n    }\r\n  }\r\n\r\n  export default keyCreator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}