{"ast":null,"code":"export let newAllQuestionKeyCombinationArray = [];\nconst nonKeyWords = [\"the\", \"as\", \"and\", \"does\", \"all\", \"up\", \"that\", \"been\", \"this\", \"the\", \"of\", \"from\", \"be\", \"is\", \"any\", \"to\", \"what\", \"your\"];\nfunction keyCreator(keyquestion) {\n  let singleQuestionKeyCombinationArray = [];\n  let wordsArray = keyquestion.split(\" \");\n  for (let index = 0; index < nonKeyWords.length; index++) {\n    const element = nonKeyWords[index];\n    wordsArray = wordArray.filter((word, i) => {\n      if (word.toLowerCase() === wordToFind.toLowerCase()) {\n        // If the word is found, check if it is separate\n        if ((i === 0 || !/\\w/.test(wordArray[i - 1])) && (i === wordArray.length - 1 || !/\\w/.test(wordArray[i + 1]))) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    });\n  }\n  console.log(wordsArray, \"wordsArray\");\n  for (let i = 0; i < wordsArray.length; i++) {\n    const element1 = wordsArray[i];\n    const element2 = wordsArray[i + 1];\n    const key = `${element1}_${element2}`;\n    singleQuestionKeyCombinationArray.push(key.toLowerCase());\n    if (wordsArray.indexOf(element2) === wordsArray.length - 1) break;\n  }\n  console.log(singleQuestionKeyCombinationArray, \"singlll\");\n  var randomKeyOfSingleQuestion = singleQuestionKeyCombinationArray.length === 0 ? \"enter_your_key\" : singleQuestionKeyCombinationArray[Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)];\n  for (let i = 0; i < randomKeyOfSingleQuestion.length; i++) {\n    const singleCharacterOfKey = randomKeyOfSingleQuestion[i];\n    if (singleCharacterOfKey === \"?\" || singleCharacterOfKey === \":\" || singleCharacterOfKey === \",\" || singleCharacterOfKey === \"(\" || singleCharacterOfKey === \")\" || singleCharacterOfKey === \".\" || singleCharacterOfKey === \"/\" || singleCharacterOfKey === \"’\" || singleCharacterOfKey === \"-\") {\n      randomKeyOfSingleQuestion = randomKeyOfSingleQuestion.replace(singleCharacterOfKey, \"\");\n    }\n  }\n  if (!newAllQuestionKeyCombinationArray.includes(randomKeyOfSingleQuestion)) {\n    newAllQuestionKeyCombinationArray.push(randomKeyOfSingleQuestion);\n  } else {\n    newAllQuestionKeyCombinationArray.push(singleQuestionKeyCombinationArray.length === 0 ? \"Enter_your_key\" : `${randomKeyOfSingleQuestion}_1`);\n  }\n}\nexport default keyCreator;","map":{"version":3,"names":["newAllQuestionKeyCombinationArray","nonKeyWords","keyCreator","keyquestion","singleQuestionKeyCombinationArray","wordsArray","split","index","length","element","wordArray","filter","word","i","toLowerCase","wordToFind","test","console","log","element1","element2","key","push","indexOf","randomKeyOfSingleQuestion","Math","floor","random","singleCharacterOfKey","replace","includes"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/src/keyCreator.js"],"sourcesContent":["export let newAllQuestionKeyCombinationArray = [];\r\nconst nonKeyWords = [\r\n  \"the\",\r\n  \"as\",\r\n  \"and\",\r\n  \"does\",\r\n  \"all\",\r\n  \"up\",\r\n  \"that\",\r\n  \"been\",\r\n  \"this\",\r\n  \"the\",\r\n  \"of\",\r\n  \"from\",\r\n  \"be\",\r\n  \"is\",\r\n  \"any\",\r\n  \"to\",\r\n  \"what\",\r\n  \"your\"\r\n];\r\nfunction keyCreator(keyquestion) {\r\n  let singleQuestionKeyCombinationArray = [];\r\n  let wordsArray = keyquestion.split(\" \");\r\n  for (let index = 0; index < nonKeyWords.length; index++) {\r\n    const element = nonKeyWords[index];\r\n    wordsArray = wordArray.filter((word, i) => {\r\n      if (word.toLowerCase() === wordToFind.toLowerCase()) {\r\n        // If the word is found, check if it is separate\r\n        if ((i === 0 || !/\\w/.test(wordArray[i - 1])) && (i === wordArray.length - 1 || !/\\w/.test(wordArray[i + 1]))) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    \r\n  }\r\n  console.log(wordsArray,\"wordsArray\")\r\n  for (let i = 0; i < wordsArray.length; i++) {\r\n    const element1 = wordsArray[i];\r\n    const element2 = wordsArray[i + 1];\r\n    const key = `${element1}_${element2}`;\r\n    singleQuestionKeyCombinationArray.push(key.toLowerCase());\r\n    if (wordsArray.indexOf(element2) === wordsArray.length - 1) break;\r\n  }\r\n\r\n console.log(singleQuestionKeyCombinationArray,\"singlll\")\r\n\r\n  var randomKeyOfSingleQuestion =\r\n    singleQuestionKeyCombinationArray.length === 0\r\n      ? \"enter_your_key\"\r\n      : singleQuestionKeyCombinationArray[\r\n          Math.floor(Math.random() * singleQuestionKeyCombinationArray.length)\r\n        ];\r\n  for (let i = 0; i < randomKeyOfSingleQuestion.length; i++) {\r\n    const singleCharacterOfKey = randomKeyOfSingleQuestion[i];\r\n    if (\r\n      singleCharacterOfKey === \"?\" ||\r\n      singleCharacterOfKey === \":\" ||\r\n      singleCharacterOfKey === \",\" ||\r\n      singleCharacterOfKey === \"(\" ||\r\n      singleCharacterOfKey === \")\" ||\r\n      singleCharacterOfKey === \".\" ||\r\n      singleCharacterOfKey === \"/\" ||\r\n      singleCharacterOfKey === \"’\" ||\r\n      singleCharacterOfKey === \"-\"\r\n    ) {\r\n      randomKeyOfSingleQuestion = randomKeyOfSingleQuestion.replace(\r\n        singleCharacterOfKey,\r\n        \"\"\r\n      );\r\n    }\r\n  }\r\n\r\n  if (!newAllQuestionKeyCombinationArray.includes(randomKeyOfSingleQuestion)) {\r\n    newAllQuestionKeyCombinationArray.push(randomKeyOfSingleQuestion);\r\n  } else {\r\n    newAllQuestionKeyCombinationArray.push(\r\n      singleQuestionKeyCombinationArray.length === 0\r\n        ? \"Enter_your_key\"\r\n        : `${randomKeyOfSingleQuestion}_1`\r\n    );\r\n  }\r\n}\r\n\r\nexport default keyCreator;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}