{"ast":null,"code":"/**\r\n * browser/indexFile.js\r\n *\r\n * Copyright (c) 2012-2019 mooster@42at.com\r\n * https://github.com/moos/wordpos\r\n *\r\n * Released under MIT license\r\n */\n\nconst {\n  indexLookup\n} = require('../common');\nconst {\n  sample\n} = require('../util');\nconst BaseFile = require('./baseFile');\nconst Trie = require('../../lib/natural/trie/trie');\n\n/**\r\n * find a search term in an index file (using fast index)\r\n *\r\n * Calls to same bucket are queued for callback using the piper.\r\n *\r\n * @param search {string} - word to search for\r\n * @param callback {function} - callback receives found line and tokens\r\n * @returns none\r\n * @this IndexFile\r\n */\nfunction find(search, callback) {\n  var miss = {\n    status: 'miss'\n  };\n  if (!(search in this.file)) {\n    callback(miss);\n    return;\n  }\n  var line = this.file[search],\n    tokens = line.split(/\\s+/),\n    result = {\n      status: 'hit',\n      key: search,\n      line: line,\n      tokens: tokens\n    };\n  result.tokens.unshift(search);\n  callback(result);\n}\n\n/**\r\n * Select <count> words at random for POS\r\n *\r\n * @param  {string} startsWith - string that results should start with\r\n * @param  {integer} count - number of results to return\r\n * @param  {Function} callback - receives (results, startsWith)\r\n * @return {Promise} receives results\r\n * @this IndexFile\r\n */\nfunction rand(startsWith, count, callback) {\n  const done = res => {\n    callback(res, startsWith || '');\n    return Promise.resolve(res);\n  };\n  const doSample = values => {\n    let res = sample(values, count);\n    // console.timeEnd('getkeys')\n    return done(res);\n  };\n  const time = label => {\n    this.options.debug && console.time(label + ' ' + this.posName);\n  };\n  const timeEnd = label => {\n    this.options.debug && console.timeEnd(label + ' ' + this.posName);\n  };\n  if (!startsWith) {\n    // console.time('getkeys')\n    return doSample(this.getKeys());\n  }\n\n  // calc trie if haven't done so yet\n  if (!this.trie) {\n    time('Trie');\n    this.trie = new Trie();\n    this.trie.addStrings(this.getKeys());\n    timeEnd('Trie');\n  }\n  let keys = [];\n  time('trie-withprefix');\n  keys = this.trie.keysWithPrefix(startsWith);\n  timeEnd('trie-withprefix');\n\n  // TODO cache results?\n\n  return keys.length ? doSample(keys) : done([]);\n}\n\n/**\r\n * IndexFile class\r\n */\nclass IndexFile extends BaseFile {\n  keys = null;\n\n  /**\r\n   * @param dictPath {string} - WordNet db dict path\r\n   * @param posName {string} - name of index: noun, verb, adj, adv\r\n   * @param {object} [options] - @see WordPOS options\r\n   * @constructor\r\n   */\n  constructor(dictPath, posName, options) {\n    super('index', dictPath, posName, options);\n    this.options = Object.assign({}, options);\n    this.posName = posName;\n  }\n  getKeys() {\n    return this.keys || (this.keys = Object.keys(this.file));\n  }\n  lookup() {\n    return this.ready(indexLookup, arguments);\n  }\n  find() {\n    return this.ready(find, arguments);\n  }\n  rand() {\n    return this.ready(rand, arguments);\n  }\n}\nmodule.exports = IndexFile;","map":{"version":3,"names":["indexLookup","require","sample","BaseFile","Trie","find","search","callback","miss","status","file","line","tokens","split","result","key","unshift","rand","startsWith","count","done","res","Promise","resolve","doSample","values","time","label","options","debug","console","posName","timeEnd","getKeys","trie","addStrings","keys","keysWithPrefix","length","IndexFile","constructor","dictPath","Object","assign","lookup","ready","arguments","module","exports"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/form-builder/node_modules/wordpos/src/browser/indexFile.js"],"sourcesContent":["/**\r\n * browser/indexFile.js\r\n *\r\n * Copyright (c) 2012-2019 mooster@42at.com\r\n * https://github.com/moos/wordpos\r\n *\r\n * Released under MIT license\r\n */\r\n\r\nconst { indexLookup } = require('../common');\r\nconst { sample } = require('../util');\r\nconst BaseFile = require('./baseFile');\r\nconst Trie = require('../../lib/natural/trie/trie');\r\n\r\n/**\r\n * find a search term in an index file (using fast index)\r\n *\r\n * Calls to same bucket are queued for callback using the piper.\r\n *\r\n * @param search {string} - word to search for\r\n * @param callback {function} - callback receives found line and tokens\r\n * @returns none\r\n * @this IndexFile\r\n */\r\nfunction find(search, callback) {\r\n  var miss = {status: 'miss'};\r\n\r\n  if (!(search in this.file)) {\r\n    callback(miss);\r\n    return;\r\n  }\r\n\r\n  var\r\n    line = this.file[search],\r\n    tokens = line.split(/\\s+/),\r\n    result = {\r\n      status: 'hit',\r\n      key: search,\r\n      line: line,\r\n      tokens: tokens\r\n    };\r\n\r\n  result.tokens.unshift(search);\r\n  callback(result);\r\n}\r\n\r\n/**\r\n * Select <count> words at random for POS\r\n *\r\n * @param  {string} startsWith - string that results should start with\r\n * @param  {integer} count - number of results to return\r\n * @param  {Function} callback - receives (results, startsWith)\r\n * @return {Promise} receives results\r\n * @this IndexFile\r\n */\r\nfunction rand(startsWith, count, callback) {\r\n  const done = (res) => {\r\n    callback(res, startsWith || '');\r\n    return Promise.resolve(res);\r\n  };\r\n\r\n  const doSample = (values) => {\r\n    let res = sample(values, count);\r\n    // console.timeEnd('getkeys')\r\n    return done(res);\r\n  };\r\n\r\n  const time = (label) => {\r\n    this.options.debug && console.time(label + ' ' + this.posName);\r\n  };\r\n\r\n  const timeEnd = (label) => {\r\n    this.options.debug && console.timeEnd(label + ' ' + this.posName);\r\n  };\r\n\r\n  if (!startsWith) {\r\n    // console.time('getkeys')\r\n    return doSample(this.getKeys());\r\n  }\r\n\r\n  // calc trie if haven't done so yet\r\n  if (!this.trie) {\r\n    time('Trie');\r\n    this.trie = new Trie();\r\n    this.trie.addStrings(this.getKeys());\r\n    timeEnd('Trie');\r\n  }\r\n\r\n  let keys = [];\r\n  time('trie-withprefix');\r\n  keys = this.trie.keysWithPrefix(startsWith);\r\n  timeEnd('trie-withprefix');\r\n\r\n  // TODO cache results?\r\n\r\n  return keys.length ? doSample(keys) : done([]);\r\n}\r\n\r\n/**\r\n * IndexFile class\r\n */\r\nclass IndexFile extends BaseFile {\r\n\r\n  keys = null;\r\n\r\n  /**\r\n   * @param dictPath {string} - WordNet db dict path\r\n   * @param posName {string} - name of index: noun, verb, adj, adv\r\n   * @param {object} [options] - @see WordPOS options\r\n   * @constructor\r\n   */\r\n  constructor(dictPath, posName, options) {\r\n    super('index', dictPath, posName, options);\r\n    this.options = Object.assign({}, options);\r\n    this.posName = posName;\r\n  }\r\n\r\n  getKeys() {\r\n    return this.keys || (this.keys = Object.keys(this.file));\r\n  }\r\n\r\n  lookup() {\r\n    return this.ready(indexLookup, arguments);\r\n  }\r\n\r\n  find() {\r\n    return this.ready(find, arguments);\r\n  }\r\n\r\n  rand() {\r\n    return this.ready(rand, arguments);\r\n  }\r\n}\r\n\r\nmodule.exports = IndexFile;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}