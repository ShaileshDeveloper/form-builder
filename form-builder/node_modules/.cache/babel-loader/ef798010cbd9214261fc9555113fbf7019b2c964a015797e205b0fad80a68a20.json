{"ast":null,"code":"/**\n * combinatorics.js\n *\n *  Licensed under the MIT license.\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  @author: Dan Kogai <dankogai+github@gmail.com>\n *\n *  References:\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-combination\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-permutation\n *  @link: http://en.wikipedia.org/wiki/Factorial_number_system\n *  @link: https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nexport const version = '2.1.1';\n/**\n * calculates `P(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Permutation\n */\nexport function permutation(n, k) {\n  if (n < 0) throw new RangeError(`${n} is out of range`);\n  if (k < 0) throw new RangeError(`${k} is out of range`);\n  if (0 == k) return 1n;\n  if (n < k) return 0n;\n  let [bn, bk, bp] = [BigInt(n), BigInt(k), 1n];\n  while (bk--) bp *= bn--;\n  return bp;\n}\n/**\n * calculates `C(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Combination\n */\nexport function combination(n, k) {\n  if (0 == k) return 1n;\n  if (n == k) return 1n;\n  if (n < k) return 0n;\n  return permutation(n, k) / permutation(k, k);\n}\n/**\n * calculates `n!` === `P(n, n)`.\n *\n * @link https://en.wikipedia.org/wiki/Factorial\n */\nexport function factorial(n) {\n  return permutation(n, n);\n}\n/**\n * returns the factoradic representation of `n`, least significant order.\n *\n * @link https://en.wikipedia.org/wiki/Factorial_number_system\n * @param {number} l the number of digits\n */\nexport function factoradic(n) {\n  let l = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (n < 0) throw new RangeError(`${n} is out of range`);\n  let [bn, bf] = [BigInt(n), 1n];\n  if (!l) {\n    for (l = 1; bf < bn; bf *= BigInt(++l));\n    if (bn < bf) bf /= BigInt(l--);\n  } else {\n    bf = BigInt(factorial(l));\n  }\n  let digits = [0];\n  for (; l; bf /= BigInt(l--)) {\n    digits[l] = Number(bn / bf);\n    bn %= bf;\n  }\n  return digits;\n}\n/**\n * `combinadic(n, k)` returns a function\n * that takes `m` as an argument and\n * returns the combinadics representation of `m` for `n C k`.\n *\n * @link https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nexport function combinadic(n, k) {\n  const count = combination(n, k);\n  const [bn, bk] = [BigInt(n), BigInt(k)];\n  return m => {\n    if (m < 0 || count <= m) throw new RangeError(`${m} is out of range`);\n    let digits = [];\n    let [ba, bb] = [bn, bk];\n    let x = BigInt(count) - 1n - BigInt(m);\n    for (let i = 0; i < k; i++) {\n      ba--;\n      while (x < combination(ba, bb)) ba--;\n      digits.push(Number(bn - 1n - ba));\n      x -= combination(ba, bb);\n      bb--;\n    }\n    return digits;\n  };\n}\n/**\n *\n */\nconst _crypto = typeof crypto !== 'undefined' ? crypto : {};\nconst _randomBytes = typeof _crypto['randomBytes'] === 'function' ? len => Uint8Array.from(_crypto['randomBytes'](len)) : typeof _crypto['getRandomValues'] === 'function' ? len => _crypto['getRandomValues'](new Uint8Array(len)) : len => Uint8Array.from(Array(len), () => Math.random() * 256);\n/**\n * returns random integer `n` where `min` <= `n` < `max`:\n *\n * if the argument is `BigInt` the result is also `BigInt`.\n *\n * @param {anyint} min\n * @param {anyint} max\n */\nexport function randomInteger() {\n  let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.pow(2, 53);\n  let ctor = min.constructor;\n  if (arguments.length === 0) {\n    return Math.floor(Math.random() * ctor(max));\n  }\n  if (arguments.length == 1) {\n    [min, max] = [ctor(0), min];\n  }\n  if (typeof min == 'number') {\n    // number\n    [min, max] = [Math.ceil(Number(min)), Math.ceil(Number(max))];\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n  const mag = ctor(max) - ctor(min);\n  const len = mag.toString(16).length;\n  const u8s = _randomBytes(len);\n  const rnd = u8s.reduce((a, v) => (a << ctor(8)) + ctor(v), ctor(0));\n  return (ctor(rnd) * mag >> ctor(len * 8)) + ctor(min);\n}\n;\n/**\n * Base Class of `js-combinatorics`\n */\nclass _CBase {\n  /**\n   * does `new`\n   * @param args\n   */\n  static of() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new (Function.prototype.bind.apply(this, [null].concat(args)))();\n  }\n  /**\n   * Same as `of` but takes a single array `arg`\n   *\n   * cf. https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n   */\n  static from(arg) {\n    return new (Function.prototype.bind.apply(this, [null].concat(arg)))();\n  }\n  /**\n   * Common iterator\n   */\n  [Symbol.iterator]() {\n    return function* (it, len) {\n      for (let i = 0n; i < len; i++) yield it.at(i);\n    }(this, this.length);\n  }\n  /**\n   * returns `[...this]`.\n   */\n  toArray() {\n    return [...this];\n  }\n  /**\n   * @deprecated\n   * tells wether you need `BigInt` to access all elements.\n   */\n  get isBig() {\n    return Number.MAX_SAFE_INTEGER < this.length;\n  }\n  /**\n   * @deprecated\n   * tells wether it is safe to work on this instance.\n   *\n   * * always `true` unless your platform does not support `BigInt`.\n   * * if not, `true` iff `.isBig` is `false`.\n   */\n  get isSafe() {\n    return typeof BigInt !== 'undefined' || !this.isBig;\n  }\n  /**\n  * check n for nth\n  */\n  _check(n) {\n    if (n < 0) {\n      if (this.length < -n) throw new RangeError(`${n} is out of range`);\n      return BigInt(this.length) + BigInt(n);\n    }\n    if (this.length <= n) throw new RangeError(`${n} is out of range`);\n    return n;\n  }\n  /**\n   * get the `n`th element of the iterator.\n   * negative `n` goes backwards\n   * like `Array.prototype.at()`\n   * @link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\n   */\n  at(n) {\n    return undefined;\n  }\n  /**\n   * an alias of `at`\n   */\n  nth(n) {\n    return this.at(n);\n  }\n  /**\n   * pick random element\n   */\n  sample() {\n    return this.at(randomInteger(this.length));\n  }\n  /**\n   * an infinite steam of random elements\n   */\n  samples() {\n    return function* (it) {\n      while (true) yield it.sample();\n    }(this);\n  }\n}\n/**\n * Permutation\n */\nexport class Permutation extends _CBase {\n  constructor(seed) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super();\n    this.seed = [...seed];\n    this.size = 0 < size ? size : this.seed.length;\n    this.length = permutation(this.seed.length, this.size);\n    Object.freeze(this);\n  }\n  at(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    const offset = this.seed.length - this.size;\n    const skip = factorial(offset);\n    let digits = factoradic(BigInt(n) * BigInt(skip), this.seed.length);\n    let source = this.seed.slice();\n    let result = [];\n    for (let i = this.seed.length - 1; offset <= i; i--) {\n      result.push(source.splice(digits[i], 1)[0]);\n    }\n    return result;\n  }\n}\n/**\n * Combination\n */\nexport class Combination extends _CBase {\n  constructor(seed) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super();\n    this.seed = [...seed];\n    this.size = 0 < size ? size : this.seed.length;\n    this.size = size;\n    this.length = combination(this.seed.length, this.size);\n    this.comb = combinadic(this.seed.length, this.size);\n    Object.freeze(this);\n  }\n  /**\n   * returns an iterator which is more efficient\n   * than the default iterator that uses .nth\n   *\n   * @link https://en.wikipedia.org/wiki/Combinatorial_number_system#Applications\n   */\n  bitwiseIterator() {\n    // [Symbol.iterator]() {\n    // console.log('overriding _CBase');\n    const inc = x => {\n      if (x <= 0n) return 0n;\n      const u = x & -x;\n      const v = u + x;\n      return v + ((v ^ x) / u >> 2n);\n    };\n    let x = (1n << BigInt(this.size)) - 1n; // 0b11...1\n    return function* (it, len) {\n      for (let i = 0n; i < BigInt(len); i++, x = inc(x)) {\n        let result = [];\n        for (let y = x, j = 0; 0n < y; y >>= 1n, j++) {\n          if (y & 1n) result.push(it.seed[j]);\n        }\n        // console.log(`x = ${x}`);\n        yield result;\n      }\n    }(this, this.length);\n  }\n  at(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let result = [];\n    for (let i of this.comb(n)) {\n      result.push(this.seed[i]);\n    }\n    return result;\n  }\n}\n/**\n * Base N\n */\nexport class BaseN extends _CBase {\n  constructor(seed) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (size < 1) throw new RangeError(`${size} is out of range`);\n    super();\n    this.seed = [...seed];\n    this.size = size;\n    let base = this.seed.length;\n    this.base = base;\n    this.length = BigInt(base) ** BigInt(size);\n    Object.freeze(this);\n  }\n  at(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let bn = BigInt(n);\n    const bb = BigInt(this.base);\n    let result = [];\n    for (let i = 0; i < this.size; i++) {\n      let bd = bn % bb;\n      result.push(this.seed[Number(bd)]);\n      bn -= bd;\n      bn /= bb;\n    }\n    return result;\n  }\n}\n/**\n * Power Set\n */\nexport class PowerSet extends _CBase {\n  constructor(seed) {\n    super();\n    this.seed = [...seed];\n    const length = 1n << BigInt(this.seed.length);\n    this.length = length;\n    Object.freeze(this);\n  }\n  at(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let bn = BigInt(n);\n    let result = [];\n    for (let bi = 0n; bn; bn >>= 1n, bi++) if (bn & 1n) result.push(this.seed[Number(bi)]);\n    return result;\n  }\n}\n/**\n * Cartesian Product\n */\nexport class CartesianProduct extends _CBase {\n  constructor() {\n    super();\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this.seed = args.map(v => [...v]);\n    this.size = this.seed.length;\n    const length = this.seed.reduce((a, v) => a * BigInt(v.length), 1n);\n    this.length = length;\n    Object.freeze(this);\n  }\n  at(n) {\n    n = this._check(n);\n    if (n === undefined) return undefined;\n    let bn = BigInt(n);\n    let result = [];\n    for (let i = 0; i < this.size; i++) {\n      const base = this.seed[i].length;\n      const bb = BigInt(base);\n      const bd = bn % bb;\n      result.push(this.seed[i][Number(bd)]);\n      bn -= bd;\n      bn /= bb;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["version","permutation","n","k","RangeError","bn","bk","bp","BigInt","combination","factorial","factoradic","l","bf","digits","Number","combinadic","count","m","ba","bb","x","i","push","_crypto","crypto","_randomBytes","len","Uint8Array","from","Array","Math","random","randomInteger","min","max","pow","ctor","constructor","arguments","length","floor","ceil","mag","toString","u8s","rnd","reduce","a","v","_CBase","of","args","Function","prototype","bind","apply","concat","arg","Symbol","iterator","it","at","toArray","isBig","MAX_SAFE_INTEGER","isSafe","_check","undefined","nth","sample","samples","Permutation","seed","size","Object","freeze","offset","skip","source","slice","result","splice","Combination","comb","bitwiseIterator","inc","u","y","j","BaseN","base","bd","PowerSet","bi","CartesianProduct","map"],"sources":["C:/Users/shail/OneDrive/Documents/GitHub/form-builder/node_modules/js-combinatorics/combinatorics.js"],"sourcesContent":["/**\n * combinatorics.js\n *\n *  Licensed under the MIT license.\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  @author: Dan Kogai <dankogai+github@gmail.com>\n *\n *  References:\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-combination\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-permutation\n *  @link: http://en.wikipedia.org/wiki/Factorial_number_system\n *  @link: https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nexport const version = '2.1.1';\n/**\n * calculates `P(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Permutation\n */\nexport function permutation(n, k) {\n    if (n < 0)\n        throw new RangeError(`${n} is out of range`);\n    if (k < 0)\n        throw new RangeError(`${k} is out of range`);\n    if (0 == k)\n        return 1n;\n    if (n < k)\n        return 0n;\n    let [bn, bk, bp] = [BigInt(n), BigInt(k), 1n];\n    while (bk--)\n        bp *= bn--;\n    return bp;\n}\n/**\n * calculates `C(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Combination\n */\nexport function combination(n, k) {\n    if (0 == k)\n        return 1n;\n    if (n == k)\n        return 1n;\n    if (n < k)\n        return 0n;\n    return permutation(n, k) / permutation(k, k);\n}\n/**\n * calculates `n!` === `P(n, n)`.\n *\n * @link https://en.wikipedia.org/wiki/Factorial\n */\nexport function factorial(n) {\n    return permutation(n, n);\n}\n/**\n * returns the factoradic representation of `n`, least significant order.\n *\n * @link https://en.wikipedia.org/wiki/Factorial_number_system\n * @param {number} l the number of digits\n */\nexport function factoradic(n, l = 0) {\n    if (n < 0)\n        throw new RangeError(`${n} is out of range`);\n    let [bn, bf] = [BigInt(n), 1n];\n    if (!l) {\n        for (l = 1; bf < bn; bf *= BigInt(++l))\n            ;\n        if (bn < bf)\n            bf /= BigInt(l--);\n    }\n    else {\n        bf = BigInt(factorial(l));\n    }\n    let digits = [0];\n    for (; l; bf /= BigInt(l--)) {\n        digits[l] = Number(bn / bf);\n        bn %= bf;\n    }\n    return digits;\n}\n/**\n * `combinadic(n, k)` returns a function\n * that takes `m` as an argument and\n * returns the combinadics representation of `m` for `n C k`.\n *\n * @link https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nexport function combinadic(n, k) {\n    const count = combination(n, k);\n    const [bn, bk] = [BigInt(n), BigInt(k)];\n    return (m) => {\n        if (m < 0 || count <= m)\n            throw new RangeError(`${m} is out of range`);\n        let digits = [];\n        let [ba, bb] = [bn, bk];\n        let x = BigInt(count) - 1n - BigInt(m);\n        for (let i = 0; i < k; i++) {\n            ba--;\n            while (x < combination(ba, bb))\n                ba--;\n            digits.push(Number(bn - 1n - ba));\n            x -= combination(ba, bb);\n            bb--;\n        }\n        return digits;\n    };\n}\n/**\n *\n */\nconst _crypto = typeof crypto !== 'undefined' ? crypto : {};\nconst _randomBytes = typeof _crypto['randomBytes'] === 'function'\n    ? (len) => Uint8Array.from(_crypto['randomBytes'](len))\n    : typeof _crypto['getRandomValues'] === 'function'\n        ? (len) => _crypto['getRandomValues'](new Uint8Array(len))\n        : (len) => Uint8Array.from(Array(len), () => Math.random() * 256);\n/**\n * returns random integer `n` where `min` <= `n` < `max`:\n *\n * if the argument is `BigInt` the result is also `BigInt`.\n *\n * @param {anyint} min\n * @param {anyint} max\n */\nexport function randomInteger(min = 0, max = Math.pow(2, 53)) {\n    let ctor = min.constructor;\n    if (arguments.length === 0) {\n        return Math.floor(Math.random() * ctor(max));\n    }\n    if (arguments.length == 1) {\n        [min, max] = [ctor(0), min];\n    }\n    if (typeof min == 'number') { // number\n        [min, max] = [Math.ceil(Number(min)), Math.ceil(Number(max))];\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    const mag = ctor(max) - ctor(min);\n    const len = mag.toString(16).length;\n    const u8s = _randomBytes(len);\n    const rnd = u8s.reduce((a, v) => ((a << ctor(8)) + ctor(v)), ctor(0));\n    return ((ctor(rnd) * mag) >> ctor(len * 8)) + ctor(min);\n}\n;\n/**\n * Base Class of `js-combinatorics`\n */\nclass _CBase {\n    /**\n     * does `new`\n     * @param args\n     */\n    static of(...args) {\n        return new (Function.prototype.bind.apply(this, [null].concat(args)));\n    }\n    /**\n     * Same as `of` but takes a single array `arg`\n     *\n     * cf. https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n     */\n    static from(arg) {\n        return new (Function.prototype.bind.apply(this, [null].concat(arg)));\n    }\n    /**\n     * Common iterator\n     */\n    [Symbol.iterator]() {\n        return function* (it, len) {\n            for (let i = 0n; i < len; i++)\n                yield it.at(i);\n        }(this, this.length);\n    }\n    /**\n     * returns `[...this]`.\n     */\n    toArray() {\n        return [...this];\n    }\n    /**\n     * @deprecated\n     * tells wether you need `BigInt` to access all elements.\n     */\n    get isBig() {\n        return Number.MAX_SAFE_INTEGER < this.length;\n    }\n    /**\n     * @deprecated\n     * tells wether it is safe to work on this instance.\n     *\n     * * always `true` unless your platform does not support `BigInt`.\n     * * if not, `true` iff `.isBig` is `false`.\n     */\n    get isSafe() {\n        return typeof BigInt !== 'undefined' || !this.isBig;\n    }\n    /**\n    * check n for nth\n    */\n    _check(n) {\n        if (n < 0) {\n            if (this.length < -n)\n                throw new RangeError(`${n} is out of range`);\n            return BigInt(this.length) + BigInt(n);\n        }\n        if (this.length <= n)\n            throw new RangeError(`${n} is out of range`);\n        return n;\n    }\n    /**\n     * get the `n`th element of the iterator.\n     * negative `n` goes backwards\n     * like `Array.prototype.at()`\n     * @link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\n     */\n    at(n) { return undefined; }\n    /**\n     * an alias of `at`\n     */\n    nth(n) { return this.at(n); }\n    /**\n     * pick random element\n     */\n    sample() {\n        return this.at(randomInteger(this.length));\n    }\n    /**\n     * an infinite steam of random elements\n     */\n    samples() {\n        return function* (it) {\n            while (true)\n                yield it.sample();\n        }(this);\n    }\n}\n/**\n * Permutation\n */\nexport class Permutation extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.length = permutation(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    at(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        const offset = this.seed.length - this.size;\n        const skip = factorial(offset);\n        let digits = factoradic(BigInt(n) * BigInt(skip), this.seed.length);\n        let source = this.seed.slice();\n        let result = [];\n        for (let i = this.seed.length - 1; offset <= i; i--) {\n            result.push(source.splice(digits[i], 1)[0]);\n        }\n        return result;\n    }\n}\n/**\n * Combination\n */\nexport class Combination extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.size = size;\n        this.length = combination(this.seed.length, this.size);\n        this.comb = combinadic(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    /**\n     * returns an iterator which is more efficient\n     * than the default iterator that uses .nth\n     *\n     * @link https://en.wikipedia.org/wiki/Combinatorial_number_system#Applications\n     */\n    bitwiseIterator() {\n        // [Symbol.iterator]() {\n        // console.log('overriding _CBase');\n        const inc = (x) => {\n            if (x <= 0n)\n                return 0n;\n            const u = x & -x;\n            const v = u + x;\n            return v + (((v ^ x) / u) >> 2n);\n        };\n        let x = (1n << BigInt(this.size)) - 1n; // 0b11...1\n        return function* (it, len) {\n            for (let i = 0n; i < BigInt(len); i++, x = inc(x)) {\n                let result = [];\n                for (let y = x, j = 0; 0n < y; y >>= 1n, j++) {\n                    if (y & 1n)\n                        result.push(it.seed[j]);\n                }\n                // console.log(`x = ${x}`);\n                yield result;\n            }\n        }(this, this.length);\n    }\n    at(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let result = [];\n        for (let i of this.comb(n)) {\n            result.push(this.seed[i]);\n        }\n        return result;\n    }\n}\n/**\n * Base N\n */\nexport class BaseN extends _CBase {\n    constructor(seed, size = 1) {\n        if (size < 1)\n            throw new RangeError(`${size} is out of range`);\n        super();\n        this.seed = [...seed];\n        this.size = size;\n        let base = this.seed.length;\n        this.base = base;\n        this.length = BigInt(base) ** BigInt(size);\n        Object.freeze(this);\n    }\n    at(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = BigInt(n);\n        const bb = BigInt(this.base);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            let bd = bn % bb;\n            result.push(this.seed[Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n/**\n * Power Set\n */\nexport class PowerSet extends _CBase {\n    constructor(seed) {\n        super();\n        this.seed = [...seed];\n        const length = 1n << BigInt(this.seed.length);\n        this.length = length;\n        Object.freeze(this);\n    }\n    at(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = BigInt(n);\n        let result = [];\n        for (let bi = 0n; bn; bn >>= 1n, bi++)\n            if (bn & 1n)\n                result.push(this.seed[Number(bi)]);\n        return result;\n    }\n}\n/**\n * Cartesian Product\n */\nexport class CartesianProduct extends _CBase {\n    constructor(...args) {\n        super();\n        this.seed = args.map(v => [...v]);\n        this.size = this.seed.length;\n        const length = this.seed.reduce((a, v) => a * BigInt(v.length), 1n);\n        this.length = length;\n        Object.freeze(this);\n    }\n    at(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = BigInt(n);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            const base = this.seed[i].length;\n            const bb = BigInt(base);\n            const bd = bn % bb;\n            result.push(this.seed[i][Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}